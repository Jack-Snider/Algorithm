코딩 테스트에서 구현( Implementation )이란 '머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정'이다.
어떤 문제를 풀든 간에 소스코드를 작성하는 과정은 필수이므로 구현 문제 유형은 모든 범위의 코딩 
테스트 문제 유형을 포함하는 개념이다.

그런 의미에서 알고리즘 교재에서는 대부분 구현을 별도의 유형으로 다루지 않는다. 하지만 취업을
목표로 하는 코딩 테스트에서는 구현이 중심이 되는 문제가 자주 출제되기에 다른 알고리즘을
배우기 전에 먼저 다루고자 한다.

우리는 알고리즘 문제를 해결할 때, 문제를 읽고 문제 풀이 방법을 고민한다. 고민 끝에
문제에 대한 정확한 풀이 방법이 떠오르면 바로 정답 처리를 받을 수 있을까? 그렇지 않다.
생각해낸 문제 풀이 방법을 우리가 원하는 프로그래밍 언어( 파이썬 )로 정확히 구현해냈을 때
비로소 정답 처리를 받을 수 있다. 이를 위해 프로그래밍 언어의 문법을 정확히 알고 있어야 하며
문제의 요구사항에 어긋나지 않는 답안 코드를 쉴수 없이 작성해야 한다.

problem →  thinking → solution

흔히 문제 해결 분야에서 구현 유형의 문제를 '풀이를 떠올리는 것은 쉽지만 소스코드로 옭기기 어려운 문제'
를 의미한다. 실제 ACM-ICPC, Google Code Jam 등의 대회에 자주 참가하는 사람들이 구현 유형의
문제들을 보면 '알고리즘은 설계했는데 구현이 먼저 풀 수 있는 문제가 없을 때 푸는게 좋다'라고 설명하곤
한다. 흔히 개발할 때 프로그래밍 언어의 문법에 능숙하고 코드 작성속도( 타자 )가 빠른 사람을 보고
'피지컬이 좋다'라고 이야기 하는데, 구현 유형의 문제는 그런 의미에서 '피지컬을 요구하는'문제라고도
할 수 있다. 예를 들어 알고리즘 문제 풀이 전략 시뮬레이션 게임과 비교하면 우리가 스타크래프트와 같은
게임을 할 때, 게임에서 이길 전력을 완벽히 짯다고 해보자. 하지만 마우스를 빠르게 움직이지 못한다면
게임에서 패배할 게 뻔하다.